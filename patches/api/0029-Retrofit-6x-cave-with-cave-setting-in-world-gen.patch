From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: minotaa <jpichardo369@gmail.com>
Date: Sun, 1 Jun 2025 22:43:37 -0400
Subject: [PATCH] Retrofit 6x cave with cave setting in world gen.


diff --git a/src/main/java/dev/limetta/aerosmith/event/api/world/CustomizedGenerationSettings.java b/src/main/java/dev/limetta/aerosmith/event/api/world/CustomizedGenerationSettings.java
new file mode 100644
index 0000000000000000000000000000000000000000..61b4abc68d862909280ab421c06866cd086fe0d2
--- /dev/null
+++ b/src/main/java/dev/limetta/aerosmith/event/api/world/CustomizedGenerationSettings.java
@@ -0,0 +1,72 @@
+package dev.limetta.aerosmith.event.api.world;
+
+import java.util.Random;
+
+public class CustomizedGenerationSettings {
+    private int caveFrequency = 7;
+    private int caveLengthMin = 4;
+
+
+
+    /**
+     * Gets how frequently caves are generated, as the inverse of the percent chance that a cave
+     * (system) will start in any given chunk. For example, 7 would represent a 1/7 (14.8%) chance
+     * that a cave spawns in a chunk.
+     *
+     * @return the inverse of the chance a cave will spawn in a chunk
+     */
+    public int getCaveFrequency() {
+        return caveFrequency;
+    }
+
+
+     /**
+     * Sets how frequently caves are generated, as the inverse of the percent chance that a cave
+     * (system) will start in any given chunk. For example, 7 would represent a 1/7 (14.8%) chance
+     * that a cave spawns in a chunk.
+     *
+     * @return the inverse of the chance a cave will spawn in a chunk
+     */
+    public void setCaveFrequency(int caveFrequency) {
+        this.caveFrequency = caveFrequency;
+    }
+
+
+    /**
+     * Gets the minimum length factor of a cave, a positive integer greater than zero. The larger the
+     * factor, the longer caves will be on average.
+     *
+     * @return minimum cave length factor
+     */
+    public int getCaveLengthMin() {
+        return caveLengthMin;
+    }
+
+    /**
+     * Sets minimum cave length factor. The larger the factor, the longer caves will be on average.
+     * @param caveLengthMin minimum cave length factor
+     */
+    public void setCaveLengthMin(int caveLengthMin) {
+        this.caveLengthMin = caveLengthMin;
+    }
+
+
+  /**Add commentMore actions
+   * Override this method to change how large caves should be.
+   * @param random
+   * @return size of caves, typically between 0 and 3
+   */
+    public float getCaveSize(Random random) {
+        return random.nextFloat() * 2.0F + random.nextFloat();
+    }
+
+
+    /**
+     * Override this method to change how large caves should be when a larger cave should be spawned.
+     * @param random
+     * @return size of larger caves, typically between 1 and 4
+     */
+    public float getLargeCaveSize(Random random) {
+        return random.nextFloat() * random.nextFloat() * 3.0F + 1.0F;
+    }
+}
diff --git a/src/main/java/dev/limetta/event/CaveCarveEvent.java b/src/main/java/dev/limetta/event/CaveCarveEvent.java
deleted file mode 100644
index 06e07fed245424a7ba72e26a34c2dbb09f2dc3b9..0000000000000000000000000000000000000000
--- a/src/main/java/dev/limetta/event/CaveCarveEvent.java
+++ /dev/null
@@ -1,39 +0,0 @@
-package dev.limetta.event;
-
-import org.bukkit.Chunk;
-import org.bukkit.event.Cancellable;
-import org.bukkit.event.Event;
-import org.bukkit.event.HandlerList;
-
-public class CaveCarveEvent extends Event implements Cancellable {
-    private static final HandlerList handlers = new HandlerList();
-    private final Chunk chunk;
-    private boolean cancelled;
-
-    public CaveCarveEvent(Chunk chunk) {
-        this.chunk = chunk;
-    }
-
-    public Chunk getChunk() {
-        return chunk;
-    }
-
-    @Override
-    public boolean isCancelled() {
-        return cancelled;
-    }
-
-    @Override
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
-    }
-
-    @Override
-    public HandlerList getHandlers() {
-        return handlers;
-    }
-
-    public static HandlerList getHandlerList() {
-        return handlers;
-    }
-}
diff --git a/src/main/java/org/bukkit/WorldCreator.java b/src/main/java/org/bukkit/WorldCreator.java
index 53980fdbc60d2bae5eaa14fdc26d629b813a1bc8..cb49b225e980ebcd4a40b5775849a0afe7ee132e 100644
--- a/src/main/java/org/bukkit/WorldCreator.java
+++ b/src/main/java/org/bukkit/WorldCreator.java
@@ -1,6 +1,8 @@
 package org.bukkit;
 
 import java.util.Random;
+
+import dev.limetta.aerosmith.event.api.world.CustomizedGenerationSettings;
 import org.bukkit.command.CommandSender;
 import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.plugin.Plugin;
@@ -16,6 +18,15 @@ public class WorldCreator {
     private WorldType type = WorldType.NORMAL;
     private boolean generateStructures = true;
     private String generatorSettings = "";
+    private CustomizedGenerationSettings customGenSettings = new CustomizedGenerationSettings();
+
+    public CustomizedGenerationSettings getCustomGenSettings() {
+        return customGenSettings;
+    }
+
+    public void setCustomGenSettings(CustomizedGenerationSettings settings) {
+        customGenSettings = settings;
+    }
 
     /**
      * Creates an empty WorldCreationOptions for the given world name
